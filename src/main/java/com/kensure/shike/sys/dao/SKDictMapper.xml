<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kensure.shike.sys.dao.SKDictDao"><!--dsName="" saasAspect=""-->
	<!-- <cache readOnly="true"/> -->
    <sql id="allFields">
		id,
		code,
		name,
		simple_name as simpleName,
		typeid,
		disorder,
		created_time as createdTime,
		updated_time as updatedTime
    </sql>
    
	<sql id="insertFields">
		id,
		code,
		name,
		simple_name,
		typeid,
		disorder,
		created_time,
		updated_time
    </sql>
	
	<insert id="insert" parameterType="com.kensure.shike.sys.model.SKDict">
		insert into sk_dict (<include refid="insertFields"/>)
		values (
			#{id},
			#{code},
			#{name},
			#{simpleName},
			#{typeid},
			#{disorder},
			#{createdTime},
			#{updatedTime}
		)
	</insert>
	
	<insert id="insertInBatch" parameterType="com.kensure.shike.sys.model.SKDict">
		insert into sk_dict (<include refid="insertFields"/>) values 
		<foreach collection="list" item="item" index="index" separator=",">
			(
				#{item.id},
				#{item.code},
				#{item.name},
				#{item.simpleName},
				#{item.typeid},
				#{item.disorder},
				#{item.createdTime},
				#{item.updatedTime}
			)
		</foreach>
	</insert>   		
	
    <sql id="whereClause">
		<if test="code != null">			
			code = #{code}			
		</if>
		<if test="name != null">			
			and name = #{name}			
		</if>
		<if test="simpleName != null">			
			and simple_name = #{simpleName}			
		</if>
		<if test="typeid != null">			
			and typeid = #{typeid}			
		</if>
		<if test="disorder != null">			
			and disorder = #{disorder}			
		</if>	
		<if test="createdTime != null">			
			and created_time = #{createdTime}			
		</if>
		<if test="updatedTime != null">			
			and updated_time = #{updatedTime}			
		</if>
	</sql>
    
	<select id="selectOne" resultType="com.kensure.shike.sys.model.SKDict" parameterType="Long" >
		select <include refid="allFields"/> 
		  from sk_dict 
		 where id = #{id} 
	</select>
	
	<select id="selectByIds" parameterType="List" resultType="com.kensure.shike.sys.model.SKDict">
		select <include refid="allFields"/> from sk_dict 
		where id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</select>
		
	<select id="selectAll" resultType="com.kensure.shike.sys.model.SKDict">
		select <include refid="allFields"/> 
		from sk_dict 
	</select>

	<select id="selectCount" resultType="long">
		select count(*) from sk_dict 
	</select>
	
	<select id="selectCountByWhere" parameterType="Map" resultType="Long">
		select count(*) from sk_dict 
		<where>
		    <include refid="whereClause"/>
		</where>
	</select>

	<select id="selectByWhere" parameterType="Map" resultType="com.kensure.shike.sys.model.SKDict">
		select <include refid="allFields"/>
		from sk_dict 
		<where>
		    <include refid="whereClause"/>
		</where>				
		<if test="orderby != null">
			ORDER BY ${orderby}
		</if>
	</select>
	
	<sql id="setComn">		
		<if test="code != null">
			code = #{code},
		</if>
		<if test="name != null">
			name = #{name},
		</if>
		<if test="simpleName != null">
			simple_name = #{simpleName},
		</if>
		<if test="typeid != null">
			typeid = #{typeid},
		</if>
		<if test="disorder != null">
			disorder = #{disorder},
		</if>	
		<if test="createdTime != null">
			created_time = #{createdTime},
		</if>
		<if test="updatedTime != null">
			updated_time = #{updatedTime}
		</if>
	</sql>
	
	<update id="update" parameterType="com.kensure.shike.sys.model.SKDict">
		 update sk_dict 
		    <set>
		    	<include refid="setComn"/>
			</set>
		  where id = #{id}
	</update>
	
	<update id="updateByMap" parameterType="Map">
		 update sk_dict 
		    <set>
		    	<include refid="setComn"/>
			</set>
		  where id = #{id}
	</update>
	
	<delete id="delete">
		delete from sk_dict where id = #{id}
	</delete>
	
	<delete id="deleteMulti" parameterType="List">
		delete from sk_dict
		where id in
		<foreach collection="list" item="item" open="(" close=")" separator=",">
			#{item}
		</foreach>
	</delete>
	
	<delete id="deleteByWhere" parameterType="Map">
		delete from sk_dict 
		<where>
		    <include refid="whereClause"/>
		</where>
	</delete>	

</mapper>    
